// i18n (Internationalization) support for Hydra Escrow API Test App

export type Language = 'en' | 'ja';

export interface I18nMessages {
    // App Title
    appTitle: string;
    
    // API Configuration
    apiConfig: string;
    apiBaseUrl: string;
    updateUrl: string;
    
    // Setup & Start
    setupStart: string;
    setupButton: string;
    startButton: string;
    refreshBalance: string;
    getServerState: string;
    serverState: string;
    setupInProgress: string;
    setupCompleted: string;
    setupFailed: string;
    
    // Wallet Balance
    walletBalance: string;
    aliceL1Balance: string;
    aliceL2Balance: string;
    bobL1Balance: string;
    bobL2Balance: string;
    address: string;
    
    // L2 Payment
    l2Payment: string;
    paymentAmount: string;
    paymentAmountLabel: string;
    executePayment: string;
    
    // Transaction Control
    closeTransaction: string;
    abortTransaction: string;
    
    // Log
    log: string;
    clearLog: string;
    
    // Language
    language: string;
    english: string;
    japanese: string;
    
    // Status Messages
    apiKeyRequired: string;
    setupFirst: string;
    invalidAmount: string;
    invalidUrl: string;
    urlUpdated: string;
    
    // States
    notAvailable: string;
    
    // State Descriptions
    stateIdleDescription: string;
    stateInitialDescription: string;
    stateInitDescription: string;
    stateHeadIsInitializingDescription: string;
    stateHeadIsOpenDescription: string;
    stateHeadIsClosedDescription: string;
    stateCommittedDescription: string;
    stateTxValidDescription: string;
    stateTxInvalidDescription: string;
    stateSnapshotConfirmedDescription: string;
    stateReadyToFanoutDescription: string;
    stateFanoutPossibleDescription: string;
    stateOpenDescription: string;
    stateClosingDescription: string;
    stateClosedDescription: string;
    stateFailedDescription: string;
    
    // Status Messages
    hydraHeadOpenMessage: string;
    hydraHeadInitializationMessage: string;
    hydraHeadCloseRequestMessage: string;
    hydraHeadClosedTimerMessage: string;
    hydraHeadClosingTimerMessage: string;
    apiKeyAcquiredMessage: string;
    initializationInProgressMessage: string;
    paymentSuccessMessage: string;
    
    // Log Messages - Action messages
    initializationMessage: string;
    languageChanged: string;
    apiUrlUpdated: string;
    invalidUrlFormat: string;
    startingApiKeyAcquisition: string;
    apiKeyAcquired: string;
    aliceL1EscrowAddress: string;
    gettingBobL1Balance: string;
    apiKeyAcquisitionCompleted: string;
    apiKeyAcquisitionFailed: string;
    startingTransaction: string;
    transactionStarted: string;
    transactionStartFailed: string;
    refreshingBalances: string;
    hydraStateInfo: string;
    bobL1BalanceUpdated: string;
    stateOpenBobL1Skipped: string;
    allBalancesUpdated: string;
    failedToRefreshBalances: string;
    executingL2Payment: string;
    paymentCompleted: string;
    updatingBobL2BalanceAfterPayment: string;
    bobL2BalanceUpdatedAfterPayment: string;
    failedToUpdateBobL2Balance: string;
    paymentFailed: string;
    closingTransaction: string;
    closeInitiated: string;
    closeFailed: string;
    abortingTransaction: string;
    transactionAborted: string;
    abortFailed: string;
    gettingServerState: string;
    serverStateUpdated: string;
    failedToGetServerState: string;
    startingStatusPolling: string;
    stateChangedToOpen: string;
    statusPollingError: string;
    statusPollingStopped: string;
    
    // Manual API execution messages
    executingManualSetup: string;
    apiKeyObtainedAndSaved: string;
    setupResponseReceived: string;
    setupRequestFailed: string;
    executingManualStart: string;
    startResponseReceived: string;
    startRequestFailed: string;
    executingManualStatus: string;
    statusResponseReceived: string;
    statusRequestFailed: string;
    executingManualBalance: string;
    balanceResponseReceived: string;
    balanceRequestFailed: string;
    executingManualBalanceL2: string;
    balanceL2ResponseReceived: string;
    balanceL2RequestFailed: string;
    executingManualPayment: string;
    paymentResponseReceived: string;
    paymentRequestFailed: string;
    executingManualClose: string;
    closeResponseReceived: string;
    closeRequestFailed: string;
    executingManualAbort: string;
    abortResponseReceived: string;
    abortRequestFailed: string;
    executingManualWithdrawal: string;
    withdrawalResponseReceived: string;
    withdrawalRequestFailed: string;
    executingManualRefund: string;
    refundResponseReceived: string;
    refundRequestFailed: string;
    
    // Form validation messages
    pleaseEnterWithdrawalAddress: string;
    pleaseEnterRefundAddress: string;
    
    // API request messages
    apiRequestLog: string;
    apiResponseLog: string;
    
    // Placeholder texts
    placeholderPaymentAmount: string;
    placeholderWithdrawalAddress: string;
    placeholderRefundAddress: string;
    
    // Manual API Execution
    manualApiExecution: string;
    manualApiDescription: string;
    setupApiManual: string;
    setupApiDesc: string;
    executeSetup: string;
    senderAddress: string;
    startApiManual: string;
    startApiDesc: string;
    executeStart: string;
    statusApi: string;
    statusApiDesc: string;
    executeStatus: string;
    balanceApi: string;
    balanceApiDesc: string;
    executeBalance: string;
    balancel2Api: string;
    balancel2ApiDesc: string;
    executeBalanceL2: string;
    paymentApiManual: string;
    paymentApiDesc: string;
    executePaymentManual: string;
    closeApiManual: string;
    closeApiDesc: string;
    executeClose: string;
    abortApiManual: string;
    abortApiDesc: string;
    executeAbort: string;
    withdrawalApiManual: string;
    withdrawalApiDesc: string;
    executeWithdrawal: string;
    refundApiManual: string;
    refundApiDesc: string;
    executeRefund: string;
    amount: string;
    toAddress: string;
}

export const messages: Record<Language, I18nMessages> = {
    en: {
        // App Title
        appTitle: 'üîó Cardano Hydra Wrapper API Test App',
        
        // API Configuration
        apiConfig: '‚öôÔ∏è API Configuration',
        apiBaseUrl: 'API Base URL:',
        updateUrl: 'Update URL',
        
        // Setup & Start
        setupStart: 'üöÄ API Operations',
        setupButton: 'Get API Key',
        startButton: 'Start Transaction',
        refreshBalance: 'Refresh Balance',
        getServerState: 'Get Latest Info',
        serverState: 'üîç Server State:',
        setupInProgress: 'Setup in progress...',
        setupCompleted: 'API key acquisition completed. Transaction start is now available.',
        setupFailed: 'Setup failed',
        
        // Wallet Balance
        walletBalance: 'üí∞ Wallet Balance',
        aliceL1Balance: 'üè¶ Alice ESCROW L1 Balance',
        aliceL2Balance: '‚ö° Alice ESCROW L2 Balance',
        bobL1Balance: 'üè¶ Bob ESCROW L1 Balance',
        bobL2Balance: '‚ö° Bob ESCROW L2 Balance',
        address: 'Address:',
        
        // L2 Payment
        l2Payment: 'üí∏ L2 Payment',
        paymentAmount: 'Payment Amount (lovelace):',
        paymentAmountLabel: 'Amount',
        executePayment: 'Execute L2 Payment',
        
        // Transaction Control
        closeTransaction: 'Close Transaction',
        abortTransaction: 'Abort Transaction',
        
        // Log
        log: 'üìã Log',
        clearLog: 'Clear Log',
        
        // Language
        language: 'üåê Language',
        english: 'English',
        japanese: 'Êó•Êú¨Ë™û',
        
        // Status Messages
        apiKeyRequired: 'API Key is required',
        setupFirst: 'Please run setup first',
        invalidAmount: 'Invalid payment amount',
        invalidUrl: 'Invalid URL format',
        urlUpdated: 'API URL updated',
        
        // States
        notAvailable: '-- Not Available --',
        
        // State Descriptions
        stateIdleDescription: 'Hydra Head is closed. Click "Start Transaction" to proceed to the next phase',
        stateInitialDescription: 'Initialization work is in progress to open the Hydra Head',
        stateInitDescription: 'Hydra Head initialization is in progress. Will proceed to next phase when wallet UTXOs are committed',
        stateHeadIsInitializingDescription: 'Hydra Head is being initialized',
        stateHeadIsOpenDescription: 'Hydra Head is open and ready for L2 transactions',
        stateHeadIsClosedDescription: 'Hydra Head has been closed',
        stateCommittedDescription: 'Commit transaction has been processed',
        stateTxValidDescription: 'Transaction is valid and confirmed',
        stateTxInvalidDescription: 'Transaction is invalid or failed',
        stateSnapshotConfirmedDescription: 'L2 snapshot has been confirmed',
        stateReadyToFanoutDescription: 'Ready to distribute final balances',
        stateFanoutPossibleDescription: 'Final balance distribution is possible',
        stateOpenDescription: 'L2 channel is open for payments',
        stateClosingDescription: 'Hydra Head Close process is in progress to finalize L2 transaction contents',
        stateClosedDescription: 'ESCROW transaction has been closed',
        stateFailedDescription: 'ESCROW transaction has failed',
        
        // Status Messages
        hydraHeadOpenMessage: 'Hydra Head is now open. Fast L2 payments are available.',
        hydraHeadInitializationMessage: 'Hydra Head initialization request issued. Initialization is in progress.',
        hydraHeadCloseRequestMessage: 'Hydra Head close request issued. Close process is in progress.',
        hydraHeadClosedTimerMessage: 'Hydra Head has been closed. L2 transaction finalization process is in progress. {0} seconds elapsed',
        hydraHeadClosingTimerMessage: 'Hydra Head close is in progress. {0} seconds elapsed',
        apiKeyAcquiredMessage: 'API Key acquisition completed',
        initializationInProgressMessage: 'Initialization process is currently in progress. {0} seconds elapsed',
        paymentSuccessMessage: 'Payment of {0} lovelace completed successfully.',
        
        // Log Messages - Action messages
        initializationMessage: 'üöÄ Hydra Escrow API Tester initialized',
        languageChanged: 'üåê Language changed to',
        apiUrlUpdated: '‚úÖ API URL updated to',
        invalidUrlFormat: '‚ùå Invalid URL format',
        startingApiKeyAcquisition: 'üîß Starting API key acquisition...',
        apiKeyAcquired: '‚úÖ API Key acquired',
        aliceL1EscrowAddress: 'üìç Alice L1 Escrow Address',
        gettingBobL1Balance: 'üí∞ Getting Bob L1 balance...',
        apiKeyAcquisitionCompleted: '‚úÖ API Key acquisition completed',
        apiKeyAcquisitionFailed: '‚ùå API Key acquisition failed',
        startingTransaction: 'üöÄ Starting transaction...',
        transactionStarted: '‚úÖ Transaction started',
        transactionStartFailed: '‚ùå Transaction start failed',
        refreshingBalances: 'üìä Refreshing balances...',
        hydraStateInfo: 'üîç Hydra state',
        bobL1BalanceUpdated: '‚úÖ Bob L1 balance updated',
        stateOpenBobL1Skipped: '‚ö†Ô∏è State is Open - Bob L1 balance update skipped',
        allBalancesUpdated: '‚úÖ All balances updated',
        failedToRefreshBalances: '‚ùå Failed to refresh balances',
        executingL2Payment: 'üí∞ Executing L2 payment',
        paymentCompleted: '‚úÖ Payment completed',
        updatingBobL2BalanceAfterPayment: 'üí∞ Updating Bob L2 balance after payment...',
        bobL2BalanceUpdatedAfterPayment: '‚úÖ Bob L2 balance updated after payment',
        failedToUpdateBobL2Balance: '‚ö†Ô∏è Failed to update Bob L2 balance',
        paymentFailed: '‚ùå Payment failed',
        closingTransaction: 'üîí Closing transaction...',
        closeInitiated: '‚úÖ Close initiated',
        closeFailed: '‚ùå Close failed',
        abortingTransaction: 'üõë Aborting transaction...',
        transactionAborted: '‚úÖ Transaction aborted',
        abortFailed: '‚ùå Abort failed',
        gettingServerState: 'üîç Getting server state...',
        serverStateUpdated: '‚úÖ Server state updated',
        failedToGetServerState: '‚ùå Failed to get server state',
        startingStatusPolling: 'üîÑ Starting status polling every 5 seconds...',
        stateChangedToOpen: 'üéâ State changed to Open - refreshing L2 balances...',
        statusPollingError: '‚ö†Ô∏è Status polling error',
        statusPollingStopped: '‚èπÔ∏è Status polling stopped',
        
        // Manual API execution messages
        executingManualSetup: 'üöÄ Executing manual /setup request...',
        apiKeyObtainedAndSaved: '‚úÖ API Key obtained and saved',
        setupResponseReceived: '‚úÖ /setup response',
        setupRequestFailed: '‚ùå /setup request failed',
        executingManualStart: 'üöÄ Executing manual /start request...',
        startResponseReceived: '‚úÖ /start response',
        startRequestFailed: '‚ùå /start request failed',
        executingManualStatus: 'üìä Executing manual /status request...',
        statusResponseReceived: '‚úÖ /status response',
        statusRequestFailed: '‚ùå /status request failed',
        executingManualBalance: 'üí∞ Executing manual /balance request...',
        balanceResponseReceived: '‚úÖ /balance response',
        balanceRequestFailed: '‚ùå /balance request failed',
        executingManualBalanceL2: '‚ö° Executing manual /balancel2 request...',
        balanceL2ResponseReceived: '‚úÖ /balancel2 response',
        balanceL2RequestFailed: '‚ùå /balancel2 request failed',
        executingManualPayment: 'üí∏ Executing manual /payment request',
        paymentResponseReceived: '‚úÖ /payment response',
        paymentRequestFailed: '‚ùå /payment request failed',
        executingManualClose: 'üîí Executing manual /close request...',
        closeResponseReceived: '‚úÖ /close response',
        closeRequestFailed: '‚ùå /close request failed',
        executingManualAbort: 'üõë Executing manual /abort request...',
        abortResponseReceived: '‚úÖ /abort response',
        abortRequestFailed: '‚ùå /abort request failed',
        executingManualWithdrawal: 'üí≥ Executing manual /withdrawal request',
        withdrawalResponseReceived: '‚úÖ /withdrawal response',
        withdrawalRequestFailed: '‚ùå /withdrawal request failed',
        executingManualRefund: '‚Ü©Ô∏è Executing manual /refund request',
        refundResponseReceived: '‚úÖ /refund response',
        refundRequestFailed: '‚ùå /refund request failed',
        
        // Form validation messages
        pleaseEnterWithdrawalAddress: '‚ö†Ô∏è Please enter withdrawal address',
        pleaseEnterRefundAddress: '‚ö†Ô∏è Please enter refund address',
        
        // API request messages
        apiRequestLog: 'üåê',
        apiResponseLog: 'üì• Response',
        
        // Placeholder texts
        placeholderPaymentAmount: '1000000',
        placeholderWithdrawalAddress: 'addr_test1...',
        placeholderRefundAddress: 'addr_test1...',
        
        // Manual API Execution
        manualApiExecution: 'üîß Manual API Execution',
        manualApiDescription: 'Execute each API endpoint individually. API Key is automatically set.',
        setupApiManual: 'üöÄ /setup',
        setupApiDesc: 'Setup ESCROW and generate API Key',
        executeSetup: 'Execute',
        senderAddress: 'Sender Address:',
        startApiManual: 'üöÄ /start',
        startApiDesc: 'Start ESCROW transaction',
        executeStart: 'Execute',
        statusApi: 'üìä /status',
        statusApiDesc: 'Get ESCROW status and Alice L2 balance',
        executeStatus: 'Execute',
        balanceApi: 'üí∞ /balance',
        balanceApiDesc: 'Get Bob L1 ESCROW balance',
        executeBalance: 'Execute',
        balancel2Api: '‚ö° /balancel2',
        balancel2ApiDesc: 'Get Bob L2 ESCROW balance',
        executeBalanceL2: 'Execute',
        paymentApiManual: 'üí∏ /payment',
        paymentApiDesc: 'Execute L2 payment',
        executePaymentManual: 'Execute',
        closeApiManual: 'üîí /close',
        closeApiDesc: 'Close ESCROW transaction',
        executeClose: 'Execute',
        abortApiManual: 'üõë /abort',
        abortApiDesc: 'Abort ESCROW transaction',
        executeAbort: 'Execute',
        withdrawalApiManual: 'üí≥ /withdrawal',
        withdrawalApiDesc: 'Withdraw from Bob L1 wallet',
        executeWithdrawal: 'Execute',
        refundApiManual: '‚Ü©Ô∏è /refund',
        refundApiDesc: 'Refund from Alice L1 wallet',
        executeRefund: 'Execute',
        amount: 'Amount:',
        toAddress: 'To Address:'
    },
    
    ja: {
        // App Title
        appTitle: 'üîó Cardano Hydra Wrapper API „ÉÜ„Çπ„Éà„Ç¢„Éó„É™',
        
        // API Configuration
        apiConfig: '‚öôÔ∏è API Ë®≠ÂÆö',
        apiBaseUrl: 'API Base URL:',
        updateUrl: 'URLÊõ¥Êñ∞',
        
        // Setup & Start
        setupStart: 'üöÄ API Êìç‰Ωú',
        setupButton: 'API„Ç≠„ÉºÂèñÂæó',
        startButton: 'ÂèñÂºïÈñãÂßã',
        refreshBalance: 'ÊÆãÈ´òÊõ¥Êñ∞',
        getServerState: 'ÊúÄÊñ∞ÊÉÖÂ†±ÂèñÂæó',
        serverState: 'üîç „Çµ„Éº„Éê„ÉºÁä∂ÊÖã:',
        setupInProgress: '„Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÈñãÂßã‰∏≠...',
        setupCompleted: 'API„Ç≠„Éº„ÅÆÂèñÂæó„ÇíÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇÂèñÂºïÈñãÂßã„ÅåÂèØËÉΩ„Åß„Åô„ÄÇ',
        setupFailed: '„Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÂ§±Êïó',
        
        // Wallet Balance
        walletBalance: 'üí∞ „Ç¶„Ç©„É¨„ÉÉ„ÉàÊÆãÈ´ò',
        aliceL1Balance: 'üè¶ Alice ESCROW L1 ÊÆãÈ´ò',
        aliceL2Balance: '‚ö° Alice ESCROW L2 ÊÆãÈ´ò',
        bobL1Balance: 'üè¶ Bob ESCROW L1 ÊÆãÈ´ò',
        bobL2Balance: '‚ö° Bob ESCROW L2 ÊÆãÈ´ò',
        address: '„Ç¢„Éâ„É¨„Çπ:',
        
        // L2 Payment
        l2Payment: 'üí∏ L2 Ê±∫Ê∏à',
        paymentAmount: 'ÈÄÅÈáëÈ°ç (lovelace):',
        paymentAmountLabel: 'ÈÄÅÈáëÈ°ç',
        executePayment: 'L2 ÈÄÅÈáëÂÆüË°å',
        
        // Transaction Control
        closeTransaction: 'ÂèñÂºïÁµÇ‰∫Ü',
        abortTransaction: 'ÂèñÂºï‰∏≠Ê≠¢',
        
        // Log
        log: 'üìã „É≠„Ç∞',
        clearLog: '„É≠„Ç∞„ÇØ„É™„Ç¢',
        
        // Language
        language: 'üåê Ë®ÄË™û',
        english: 'English',
        japanese: 'Êó•Êú¨Ë™û',
        
        // Status Messages
        apiKeyRequired: 'API Key„ÅåÂøÖË¶Å„Åß„Åô',
        setupFirst: 'ÊúÄÂàù„Å´„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
        invalidAmount: 'ÁÑ°Âäπ„Å™ÈÄÅÈáëÈ°ç„Åß„Åô',
        invalidUrl: 'ÁÑ°Âäπ„Å™URLÂΩ¢Âºè„Åß„Åô',
        urlUpdated: 'API URL„ÅåÊõ¥Êñ∞„Åï„Çå„Åæ„Åó„Åü',
        
        // States
        notAvailable: '-- Âà©Áî®‰∏çÂèØ --',
        
        // State Descriptions
        stateIdleDescription: 'Hydra Head„ÅåClose„Åï„Çå„Å¶„ÅÑ„ÇãÁä∂ÊÖã„Åß„Åô„ÄÇ„ÄåÂèñÂºïÈñãÂßã„Äç„ÅßÊ¨°„ÅÆ„Éï„Çß„Éº„Ç∫„Å∏ÁßªË°å„Åó„Åæ„Åô',
        stateInitialDescription: 'Hydra Head „Çí Open„Åô„ÇãÁÇ∫„ÅÆÂàùÊúüÂåñ‰ΩúÊ•≠„ÇíÂÆüÊñΩ‰∏≠„Åß„Åô',
        stateInitDescription: 'Hydra Head„ÅÆÂàùÊúüÂåñ‰∏≠„Åß„Åô„ÄÇÂêÑ„Ç¶„Ç©„É¨„ÉÉ„Éà„ÅÆUTXO„Åå„Ç≥„Éü„ÉÉ„Éà„Åï„Çå„Çã„Å®Ê¨°„ÅÆ„Éï„Çß„Éº„Ç∫„Å∏ÁßªË°å„Åó„Åæ„Åô',
        stateHeadIsInitializingDescription: 'Hydra Head„ÇíÂàùÊúüÂåñ‰∏≠„Åß„Åô',
        stateHeadIsOpenDescription: 'Hydra Head„ÅåÈñã„ÅÑ„Å¶„Åä„Çä„ÄÅL2ÂèñÂºï„ÅÆÊ∫ñÂÇô„Åå„Åß„Åç„Å¶„ÅÑ„Åæ„Åô',
        stateHeadIsClosedDescription: 'Hydra Head„ÅåÈñâ„Åò„Çâ„Çå„Åæ„Åó„Åü',
        stateCommittedDescription: '„Ç≥„Éü„ÉÉ„ÉàÂèñÂºï„ÅåÂá¶ÁêÜ„Åï„Çå„Åæ„Åó„Åü',
        stateTxValidDescription: 'ÂèñÂºï„ÅØÊúâÂäπ„Åß„ÄÅÁ¢∫Ë™ç„Åï„Çå„Å¶„ÅÑ„Åæ„Åô',
        stateTxInvalidDescription: 'ÂèñÂºï„ÅåÁÑ°Âäπ„Åæ„Åü„ÅØÂ§±Êïó„Åó„Åæ„Åó„Åü',
        stateSnapshotConfirmedDescription: 'L2„Çπ„Éä„ÉÉ„Éó„Ç∑„Éß„ÉÉ„Éà„ÅåÁ¢∫Ë™ç„Åï„Çå„Åæ„Åó„Åü',
        stateReadyToFanoutDescription: 'ÊúÄÁµÇÊÆãÈ´ò„ÅÆÈÖçÂ∏ÉÊ∫ñÂÇô„ÅåÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Åæ„Åô',
        stateFanoutPossibleDescription: 'ÊúÄÁµÇÊÆãÈ´ò„ÅÆÈÖçÂ∏É„ÅåÂèØËÉΩ„Åß„Åô',
        stateOpenDescription: 'L2„ÉÅ„É£„É≥„Éç„É´„ÅåÊ±∫Ê∏à„ÅÆ„Åü„ÇÅÈñã„ÅÑ„Å¶„ÅÑ„Åæ„Åô',
        stateClosingDescription: 'L2ÂèñÂºïÂÜÖÂÆπ„ÇíÁ¢∫ÂÆö„Åï„Åõ„ÇãÁÇ∫„Å´„ÄÅHydra Head Close Âá¶ÁêÜ„ÇíÂÆüË°å‰∏≠„Åß„Åô',
        stateClosedDescription: 'ESCROWÂèñÂºï„ÅåÁµÇ‰∫Ü„Åó„Åæ„Åó„Åü',
        stateFailedDescription: 'ESCROWÂèñÂºï„ÅåÂ§±Êïó„Åó„Åæ„Åó„Åü',
        
        // Status Messages
        hydraHeadOpenMessage: 'Hydra Head „Åå Open„Åó„Åæ„Åó„Åü„ÄÇÈ´òÈÄü„Å™L2Ê±∫Ê∏à„Åå‰ΩøÁî®ÂèØËÉΩ„Åß„Åô„ÄÇ',
        hydraHeadInitializationMessage: 'Hydra Head „ÅÆÂàùÊúüÂåñË¶ÅÊ±Ç„ÇíÁô∫Ë°å„ÄÇÂàùÊúüÂåñ„ÇíÂÆüË°å‰∏≠„Åß„Åô„ÄÇ',
        hydraHeadCloseRequestMessage: 'Hydra Head „ÅÆ CloseË¶ÅÊ±Ç„ÇíÁô∫Ë°å„Åó„Åæ„Åó„Åü„ÄÇCloseÂá¶ÁêÜ„ÇíÂÆüË°å‰∏≠„Åß„Åô„ÄÇ',
        hydraHeadClosedTimerMessage: 'Hydra Head„ÅåClose„Åï„Çå„Åæ„Åó„Åü„ÄÇL2ÂèñÂºï„ÅÆÁ¢∫ÂÆöÂá¶ÁêÜ„ÇíÂÆüË°å‰∏≠„Åß„Åô„ÄÇ{0}ÁßíÁµåÈÅé',
        hydraHeadClosingTimerMessage: 'Hydra Head „ÅÆCloseÂá¶ÁêÜ„ÇíÂÆüË°å‰∏≠„Åß„Åô„ÄÇ{0}ÁßíÁµåÈÅé',
        apiKeyAcquiredMessage: 'API„Ç≠„ÉºÂèñÂæóÂÆå‰∫Ü',
        initializationInProgressMessage: 'ÁèæÂú®ÂàùÊúüÂåñÂá¶ÁêÜ„ÇíÂÆüË°å‰∏≠„Åß„Åô„ÄÇ{0}ÁßíÁµåÈÅé',
        paymentSuccessMessage: '{0} lovelace „ÅÆÈÄÅÈáë„ÅåÊàêÂäü„Åó„Åæ„Åó„Åü„ÄÇ',
        
        // Log Messages - Action messages
        initializationMessage: 'üöÄ Hydra Escrow API „ÉÜ„Çπ„Çø„ÉºÂàùÊúüÂåñÂÆå‰∫Ü',
        languageChanged: 'üåê Ë®ÄË™ûÂ§âÊõ¥',
        apiUrlUpdated: '‚úÖ API URLÊõ¥Êñ∞',
        invalidUrlFormat: '‚ùå ÁÑ°Âäπ„Å™URLÂΩ¢Âºè',
        startingApiKeyAcquisition: 'üîß API„Ç≠„ÉºÂèñÂæóÈñãÂßã‰∏≠...',
        apiKeyAcquired: '‚úÖ API„Ç≠„ÉºÂèñÂæóÂÆå‰∫Ü',
        aliceL1EscrowAddress: 'üìç Alice L1 „Ç®„Çπ„ÇØ„É≠„Éº„Ç¢„Éâ„É¨„Çπ',
        gettingBobL1Balance: 'üí∞ Bob L1ÊÆãÈ´òÂèñÂæó‰∏≠...',
        apiKeyAcquisitionCompleted: '‚úÖ API„Ç≠„ÉºÂèñÂæóÂá¶ÁêÜÂÆå‰∫Ü',
        apiKeyAcquisitionFailed: '‚ùå API„Ç≠„ÉºÂèñÂæóÂ§±Êïó',
        startingTransaction: 'üöÄ ÂèñÂºïÈñãÂßã‰∏≠...',
        transactionStarted: '‚úÖ ÂèñÂºïÈñãÂßãÂÆå‰∫Ü',
        transactionStartFailed: '‚ùå ÂèñÂºïÈñãÂßãÂ§±Êïó',
        refreshingBalances: 'üìä ÊÆãÈ´òÊõ¥Êñ∞‰∏≠...',
        hydraStateInfo: 'üîç HydraÁä∂ÊÖã',
        bobL1BalanceUpdated: '‚úÖ Bob L1ÊÆãÈ´òÊõ¥Êñ∞ÂÆå‰∫Ü',
        stateOpenBobL1Skipped: '‚ö†Ô∏è Áä∂ÊÖã„ÅåOpen„ÅÆ„Åü„ÇÅ Bob L1ÊÆãÈ´òÊõ¥Êñ∞„Çí„Çπ„Ç≠„ÉÉ„Éó',
        allBalancesUpdated: '‚úÖ ÂÖ®ÊÆãÈ´òÊõ¥Êñ∞ÂÆå‰∫Ü',
        failedToRefreshBalances: '‚ùå ÊÆãÈ´òÊõ¥Êñ∞Â§±Êïó',
        executingL2Payment: 'üí∞ L2Ê±∫Ê∏àÂÆüË°å‰∏≠',
        paymentCompleted: '‚úÖ Ê±∫Ê∏àÂÆå‰∫Ü',
        updatingBobL2BalanceAfterPayment: 'üí∞ Ê±∫Ê∏àÂæå„ÅÆBob L2ÊÆãÈ´òÊõ¥Êñ∞‰∏≠...',
        bobL2BalanceUpdatedAfterPayment: '‚úÖ Ê±∫Ê∏àÂæå„ÅÆBob L2ÊÆãÈ´òÊõ¥Êñ∞ÂÆå‰∫Ü',
        failedToUpdateBobL2Balance: '‚ö†Ô∏è Bob L2ÊÆãÈ´òÊõ¥Êñ∞Â§±Êïó',
        paymentFailed: '‚ùå Ê±∫Ê∏àÂ§±Êïó',
        closingTransaction: 'üîí ÂèñÂºïÁµÇ‰∫ÜÂá¶ÁêÜ‰∏≠...',
        closeInitiated: '‚úÖ ÁµÇ‰∫ÜÂá¶ÁêÜÈñãÂßã',
        closeFailed: '‚ùå ÁµÇ‰∫ÜÂá¶ÁêÜÂ§±Êïó',
        abortingTransaction: 'üõë ÂèñÂºï‰∏≠Êñ≠Âá¶ÁêÜ‰∏≠...',
        transactionAborted: '‚úÖ ÂèñÂºï‰∏≠Êñ≠ÂÆå‰∫Ü',
        abortFailed: '‚ùå ‰∏≠Êñ≠Âá¶ÁêÜÂ§±Êïó',
        gettingServerState: 'üîç „Çµ„Éº„Éê„ÉºÁä∂ÊÖãÂèñÂæó‰∏≠...',
        serverStateUpdated: '‚úÖ „Çµ„Éº„Éê„ÉºÁä∂ÊÖãÊõ¥Êñ∞ÂÆå‰∫Ü',
        failedToGetServerState: '‚ùå „Çµ„Éº„Éê„ÉºÁä∂ÊÖãÂèñÂæóÂ§±Êïó',
        startingStatusPolling: 'üîÑ 5ÁßíÈñìÈöî„ÅÆÁä∂ÊÖã„Éù„Éº„É™„É≥„Ç∞ÈñãÂßã...',
        stateChangedToOpen: 'üéâ Áä∂ÊÖã„ÅåOpen„Å´Â§âÊõ¥ - L2ÊÆãÈ´òÊõ¥Êñ∞‰∏≠...',
        statusPollingError: '‚ö†Ô∏è Áä∂ÊÖã„Éù„Éº„É™„É≥„Ç∞„Ç®„É©„Éº',
        statusPollingStopped: '‚èπÔ∏è Áä∂ÊÖã„Éù„Éº„É™„É≥„Ç∞ÂÅúÊ≠¢',
        
        // Manual API execution messages
        executingManualSetup: 'üöÄ ÊâãÂãï /setup „É™„ÇØ„Ç®„Çπ„ÉàÂÆüË°å‰∏≠...',
        apiKeyObtainedAndSaved: '‚úÖ API„Ç≠„ÉºÂèñÂæó„Éª‰øùÂ≠òÂÆå‰∫Ü',
        setupResponseReceived: '‚úÖ /setup „É¨„Çπ„Éù„É≥„ÇπÂèó‰ø°',
        setupRequestFailed: '‚ùå /setup „É™„ÇØ„Ç®„Çπ„ÉàÂ§±Êïó',
        executingManualStart: 'üöÄ ÊâãÂãï /start „É™„ÇØ„Ç®„Çπ„ÉàÂÆüË°å‰∏≠...',
        startResponseReceived: '‚úÖ /start „É¨„Çπ„Éù„É≥„ÇπÂèó‰ø°',
        startRequestFailed: '‚ùå /start „É™„ÇØ„Ç®„Çπ„ÉàÂ§±Êïó',
        executingManualStatus: 'üìä ÊâãÂãï /status „É™„ÇØ„Ç®„Çπ„ÉàÂÆüË°å‰∏≠...',
        statusResponseReceived: '‚úÖ /status „É¨„Çπ„Éù„É≥„ÇπÂèó‰ø°',
        statusRequestFailed: '‚ùå /status „É™„ÇØ„Ç®„Çπ„ÉàÂ§±Êïó',
        executingManualBalance: 'üí∞ ÊâãÂãï /balance „É™„ÇØ„Ç®„Çπ„ÉàÂÆüË°å‰∏≠...',
        balanceResponseReceived: '‚úÖ /balance „É¨„Çπ„Éù„É≥„ÇπÂèó‰ø°',
        balanceRequestFailed: '‚ùå /balance „É™„ÇØ„Ç®„Çπ„ÉàÂ§±Êïó',
        executingManualBalanceL2: '‚ö° ÊâãÂãï /balancel2 „É™„ÇØ„Ç®„Çπ„ÉàÂÆüË°å‰∏≠...',
        balanceL2ResponseReceived: '‚úÖ /balancel2 „É¨„Çπ„Éù„É≥„ÇπÂèó‰ø°',
        balanceL2RequestFailed: '‚ùå /balancel2 „É™„ÇØ„Ç®„Çπ„ÉàÂ§±Êïó',
        executingManualPayment: 'üí∏ ÊâãÂãï /payment „É™„ÇØ„Ç®„Çπ„ÉàÂÆüË°å‰∏≠',
        paymentResponseReceived: '‚úÖ /payment „É¨„Çπ„Éù„É≥„ÇπÂèó‰ø°',
        paymentRequestFailed: '‚ùå /payment „É™„ÇØ„Ç®„Çπ„ÉàÂ§±Êïó',
        executingManualClose: 'üîí ÊâãÂãï /close „É™„ÇØ„Ç®„Çπ„ÉàÂÆüË°å‰∏≠...',
        closeResponseReceived: '‚úÖ /close „É¨„Çπ„Éù„É≥„ÇπÂèó‰ø°',
        closeRequestFailed: '‚ùå /close „É™„ÇØ„Ç®„Çπ„ÉàÂ§±Êïó',
        executingManualAbort: 'üõë ÊâãÂãï /abort „É™„ÇØ„Ç®„Çπ„ÉàÂÆüË°å‰∏≠...',
        abortResponseReceived: '‚úÖ /abort „É¨„Çπ„Éù„É≥„ÇπÂèó‰ø°',
        abortRequestFailed: '‚ùå /abort „É™„ÇØ„Ç®„Çπ„ÉàÂ§±Êïó',
        executingManualWithdrawal: 'üí≥ ÊâãÂãï /withdrawal „É™„ÇØ„Ç®„Çπ„ÉàÂÆüË°å‰∏≠',
        withdrawalResponseReceived: '‚úÖ /withdrawal „É¨„Çπ„Éù„É≥„ÇπÂèó‰ø°',
        withdrawalRequestFailed: '‚ùå /withdrawal „É™„ÇØ„Ç®„Çπ„ÉàÂ§±Êïó',
        executingManualRefund: '‚Ü©Ô∏è ÊâãÂãï /refund „É™„ÇØ„Ç®„Çπ„ÉàÂÆüË°å‰∏≠',
        refundResponseReceived: '‚úÖ /refund „É¨„Çπ„Éù„É≥„ÇπÂèó‰ø°',
        refundRequestFailed: '‚ùå /refund „É™„ÇØ„Ç®„Çπ„ÉàÂ§±Êïó',
        
        // Form validation messages
        pleaseEnterWithdrawalAddress: '‚ö†Ô∏è Âºï„ÅçÂá∫„ÅóÂÖà„Ç¢„Éâ„É¨„Çπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
        pleaseEnterRefundAddress: '‚ö†Ô∏è ËøîÈáëÂÖà„Ç¢„Éâ„É¨„Çπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
        
        // API request messages
        apiRequestLog: 'üåê',
        apiResponseLog: 'üì• „É¨„Çπ„Éù„É≥„Çπ',
        
        // Placeholder texts
        placeholderPaymentAmount: '1000000',
        placeholderWithdrawalAddress: 'addr_test1...',
        placeholderRefundAddress: 'addr_test1...',
        
        // Manual API Execution
        manualApiExecution: 'üîß ÊâãÂãïAPIÂÆüË°å',
        manualApiDescription: 'ÂêÑAPI„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÇíÂÄãÂà•„Å´ÂÆüË°å„Åß„Åç„Åæ„Åô„ÄÇAPI Key„ÅØËá™Âãï„ÅßË®≠ÂÆö„Åï„Çå„Åæ„Åô„ÄÇ',
        setupApiManual: 'üöÄ /setup',
        setupApiDesc: 'ESCROW„ÅÆ„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Å®API KeyÁîüÊàê',
        executeSetup: 'ÂÆüË°å',
        senderAddress: 'ÈÄÅÈáëÂÖÉ„Ç¢„Éâ„É¨„Çπ:',
        startApiManual: 'üöÄ /start',
        startApiDesc: 'ESCROWÂèñÂºï„ÇíÈñãÂßã',
        executeStart: 'ÂÆüË°å',
        statusApi: 'üìä /status',
        statusApiDesc: 'ESCROWÁä∂ÊÖã„Å®Alice L2ÊÆãÈ´ò„ÇíÂèñÂæó',
        executeStatus: 'ÂÆüË°å',
        balanceApi: 'üí∞ /balance',
        balanceApiDesc: 'Bob L1 ESCROWÊÆãÈ´ò„ÇíÂèñÂæó',
        executeBalance: 'ÂÆüË°å',
        balancel2Api: '‚ö° /balancel2',
        balancel2ApiDesc: 'Bob L2 ESCROWÊÆãÈ´ò„ÇíÂèñÂæó',
        executeBalanceL2: 'ÂÆüË°å',
        paymentApiManual: 'üí∏ /payment',
        paymentApiDesc: 'L2Ê±∫Ê∏à„ÇíÂÆüË°å',
        executePaymentManual: 'ÂÆüË°å',
        closeApiManual: 'üîí /close',
        closeApiDesc: 'ESCROWÂèñÂºï„ÇíÁµÇ‰∫Ü',
        executeClose: 'ÂÆüË°å',
        abortApiManual: 'üõë /abort',
        abortApiDesc: 'ESCROWÂèñÂºï„Çí‰∏≠Êñ≠',
        executeAbort: 'ÂÆüË°å',
        withdrawalApiManual: 'üí≥ /withdrawal',
        withdrawalApiDesc: 'Bob L1„Ç¶„Ç©„É¨„ÉÉ„Éà„Åã„ÇâÂºï„ÅçÂá∫„Åó',
        executeWithdrawal: 'ÂÆüË°å',
        refundApiManual: '‚Ü©Ô∏è /refund',
        refundApiDesc: 'Alice L1„Ç¶„Ç©„É¨„ÉÉ„Éà„Åã„ÇâËøîÈáë',
        executeRefund: 'ÂÆüË°å',
        amount: 'ÈáëÈ°ç:',
        toAddress: 'ÈÄÅÈáëÂÖà:'
    }
};

export class I18n {
    private currentLanguage: Language = 'ja'; // Default to Japanese
    private elements: Map<string, Element[]> = new Map();
    
    constructor() {
        this.initializeFromStorage();
    }
    
    private initializeFromStorage(): void {
        const savedLang = localStorage.getItem('hydra-app-language') as Language;
        if (savedLang && (savedLang === 'en' || savedLang === 'ja')) {
            this.currentLanguage = savedLang;
        }
    }
    
    public getCurrentLanguage(): Language {
        return this.currentLanguage;
    }
    
    public setLanguage(lang: Language): void {
        this.currentLanguage = lang;
        localStorage.setItem('hydra-app-language', lang);
        this.updateUI();
    }
    
    public getMessage(key: keyof I18nMessages): string {
        return messages[this.currentLanguage][key];
    }
    
    public getStateDescription(state: string): string {
        const stateKey = `state${state}Description` as keyof I18nMessages;
        if (stateKey in messages[this.currentLanguage]) {
            return this.getMessage(stateKey);
        }
        return `Status: ${state}`;
    }
    
    public formatMessage(key: keyof I18nMessages, ...args: string[]): string {
        let message = this.getMessage(key);
        args.forEach((arg, index) => {
            message = message.replace(`{${index}}`, arg);
        });
        return message;
    }
    
    public registerElement(key: keyof I18nMessages, element: Element): void {
        if (!this.elements.has(key)) {
            this.elements.set(key, []);
        }
        this.elements.get(key)!.push(element);
    }
    
    public updateUI(): void {
        // Update registered elements
        this.elements.forEach((elements, key) => {
            const message = this.getMessage(key as keyof I18nMessages);
            elements.forEach(element => {
                if (element instanceof HTMLInputElement && element.type !== 'button') {
                    element.placeholder = message;
                } else {
                    element.textContent = message;
                }
            });
        });
        
        // Update language selector
        this.updateLanguageSelector();
    }
    
    private updateLanguageSelector(): void {
        const langSelect = document.getElementById('langSelect') as HTMLSelectElement;
        if (langSelect) {
            langSelect.value = this.currentLanguage;
        }
    }
    
    public initializeUI(): void {
        // Register all translatable elements
        this.registerTranslatableElements();
        this.updateUI();
    }
    
    private registerTranslatableElements(): void {
        // Title
        const titleElement = document.querySelector('h1');
        if (titleElement) {
            this.registerElement('appTitle', titleElement);
        }
        
        // Register all elements with data-i18n attribute
        const translatableElements = document.querySelectorAll('[data-i18n]');
        translatableElements.forEach(element => {
            const keyAttr = element.getAttribute('data-i18n');
            if (keyAttr && keyAttr in messages.en) {
                const key = keyAttr as keyof I18nMessages;
                this.registerElement(key, element);
            }
        });
        
        // Register placeholder elements
        const placeholderElements = document.querySelectorAll('[data-i18n-placeholder]');
        placeholderElements.forEach(element => {
            const keyAttr = element.getAttribute('data-i18n-placeholder');
            if (keyAttr && keyAttr in messages.en) {
                const key = keyAttr as keyof I18nMessages;
                this.registerElement(key, element);
            }
        });
    }
}